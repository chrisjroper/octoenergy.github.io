<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Octopus Energy</title>
    <description>Octopus Energy is a modern, green energy supplier for the UK.
</description>
    <link>http://tech.octopus.energy/</link>
    <atom:link href="http://tech.octopus.energy/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 23 Mar 2016 16:32:52 +0000</pubDate>
    <lastBuildDate>Wed, 23 Mar 2016 16:32:52 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Organising styles for a React/Django hybrid</title>
        <description>&lt;p&gt;When we started working with React JS here at Octopus Energy, I thought I’d try implementing &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS Modules&lt;/a&gt; to achieve what they call ‘interoperable CSS’.&lt;/p&gt;

&lt;p&gt;It works especially well with React as a lot of your codebase is written as components. By definition these are pieces of code that can be re-used and placed throughout your site to achieve the same effect, so the idea of making a component truly self-contained by having it’s own encapsulated styles as well as functionality was brilliant. I used CSS modules as a PostCSS plugin and, with a few more plugins to handle things like mixins, nesting, and variables. I was ready to go.&lt;/p&gt;

&lt;p&gt;The basic notion of CSS Modules is:&lt;/p&gt;

&lt;h3 id=&quot;have-a-stylesheet-for-a-component&quot;&gt;Have a stylesheet for a component…&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* component.css */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.className&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;reference-it-in-your-component-js-file&quot;&gt;Reference it in your component JS file…&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;./component.css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;use-it-in-the-jsx&quot;&gt;Use it in the JSX…&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/h1&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Lorem&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipsum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dolor&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sit&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;amet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;and-css-modules-makes-each-reference-unique&quot;&gt;and CSS modules makes each reference unique:&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.className__abc5436&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.className__def6547&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;className__abc5436&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello word&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;className__def6547&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: for a proper introduction to CSS modules, check out &lt;a href=&quot;http://glenmaddern.com/articles/css-modules&quot;&gt;this article&lt;/a&gt; from Glen Maddern&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The benefits were pretty immediate. I had a &lt;code&gt;.css&lt;/code&gt; file to accompany every component &lt;code&gt;.jsx&lt;/code&gt; file and I could use the sort of vague classnames you would never dream of using in a regular css file. Suddenly &lt;code&gt;.Image&lt;/code&gt; was a totally acceptable selector in the context, and one that wouldn’t result in me being killed by another front end developer. The use of &lt;code&gt;@extend&lt;/code&gt; prevented code duplication inside the component file, and allowed me to use styles from another file if I was happy with reducing the level of encapsulation a little.&lt;/p&gt;

&lt;p&gt;However encapsulation means just that; totally encapsulated. &lt;/p&gt;

&lt;h2 id=&quot;the-issue&quot;&gt;The issue&lt;/h2&gt;
&lt;p&gt;It’s important to note that the downside to CSS modules in this context is entirely our own doing. There were instances where React either wasn’t the best approach or wasn’t necessary for a particular section of the site. We have a lot of skilled Python developers at Octopus Energy and so it’s always smart to utilise that. Regardless of what is going on behind the scenes though, the front end is always expected to be consistent. However I was now in the position where I had no way to access the randomly generated hash in the CSS selector that CSS modules creates and use it in a Django template.&lt;/p&gt;

&lt;p&gt;basically this part:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;__abc5436&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;of this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.className__abc5436&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is dynamically injected before the page is rendered. I could try and guess the hash but I may as well have bought a lottery ticket and expected the same outcome - an unstyled component and no extra money.&lt;/p&gt;

&lt;h2 id=&quot;the-attempted-workaround&quot;&gt;The attempted workaround&lt;/h2&gt;

&lt;p&gt;So I had CSS siloed in modular component files and areas of the site that now wanted to use those styles that weren’t React-based. In an attempt to prevent excessive duplication between the two, I created a &lt;code&gt;Sitewide.css&lt;/code&gt; file that both the CSS modules and the SASS (used for the rest of the site/global styles) could extend from. The downside to this approach is two-fold:  &lt;/p&gt;

&lt;p&gt;1) The styles in this file had to be written in pure CSS as SASS and PostCSS have different syntax for mixins and variables.  &lt;/p&gt;

&lt;p&gt;2) As pure CSS, the bigger the file becomes the less maintainable it is without the use of pre-processor features such as variables, nesting, and mixins.&lt;/p&gt;

&lt;p&gt;Therefore for future code quality, I had to remove CSS modules from the setup and replace it with SASS globally. However it’s approach did teach me some good techniques that I brought over to the custom approach we use now.&lt;/p&gt;

&lt;h2 id=&quot;the-new-approach&quot;&gt;The new approach&lt;/h2&gt;

&lt;p&gt;We use a version of the &lt;a href=&quot;http://sass-guidelin.es/#the-7-1-pattern&quot;&gt;7-1 pattern&lt;/a&gt; to lay out our styles and directories (although ours is only 5-1). It looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;sass/
|
|- base/
|    |- _global.scss    # Global rules
|    |- _type.scss      # Typography rules
|
|
|- components/
|    |- # Pattern exactly mimics app/components
|    |- # with one .scss file for each component
|    |- common/
|    |- join-wizard/
|    |- quote-wizard/
|    |- style-guide/
|
|
|- layout/
|    |- _alerts.scss    # Alerts
|    |- _buttons.scss   # Buttons
|    |- _forms.scss     # Forms
|    |- _grid.scss      # Grid (Bootstrap + our styles)
|    |- _links.scss     # Links
|    |- _lists.scss     # Lists
|    |- _nav.scss       # Nav
|    |- _print.scss     # Print specific styles
|    |- _tables.scss    # Tables
|    |- _wells.scss     # Wells
|
|
|- pages/
|    |- # Styles for any page specific rules
|    |- # (One file per section)
|    |- _dashboard.scss
|
|
|- utils/
|    |- _mixins.scss    # Mixins
|    |- _variables.scss # Variables
|
|
|- styles.scss          # Main Sass file&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although all styles are technically ‘global’ now, we try and make each component as encapsulated as possible, enabling it to be used throughout the application with no visible changes in appearance occuring. &lt;/p&gt;

&lt;p&gt;To achieve this, we have a set of rules when styling components new or existing. The rules are as follows:&lt;/p&gt;

&lt;h2 id=&quot;the-rules&quot;&gt;The rules&lt;/h2&gt;

&lt;h3 id=&quot;mimic-the-react-component-layout&quot;&gt;1.Mimic the React component layout&lt;/h3&gt;

&lt;p&gt;As you can see from the structure above, Within &lt;code&gt;sass/&lt;/code&gt;, we have a &lt;code&gt;components/&lt;/code&gt; directory that mimics the layout of the React components folder in &lt;code&gt;app/components&lt;/code&gt;. Although this isn’t in the same directory as the JS, it still maintains CSS modules’ idea of style separation. The effect is you still always know where to find the styles specific to a React component; it has the same name!&lt;/p&gt;

&lt;h3 id=&quot;never-use-global-classes&quot;&gt;2. Never use global classes&lt;/h3&gt;

&lt;p&gt;Each selector in a component &lt;code&gt;.scss&lt;/code&gt; file will start with the name of the component followed by the class name. i.e. if we were creating a &lt;code&gt;button&lt;/code&gt; class in a container called &lt;code&gt;JoinComponent&lt;/code&gt;, the class selector in &lt;code&gt;_JoinComponent.scss&lt;/code&gt; would be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.JoinComponent-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This way, the button styles is exclusive to the &lt;code&gt;JoinComponent&lt;/code&gt; component, and would not be caught up in specificity issues or accidentally overridden in another file.&lt;/p&gt;

&lt;h3 id=&quot;if-its-commonly-used-always-extend-it&quot;&gt;3. If it’s commonly used, always &lt;code&gt;@extend&lt;/code&gt; it&lt;/h3&gt;

&lt;p&gt;If your component uses a common piece of styling, such as a button or link, create a new component-specific selector and use the SASS &lt;code&gt;@extend&lt;/code&gt; syntax to bring in the style. You need to do this even if you aren’t doing anything to edit the styles of it.&lt;/p&gt;

&lt;p&gt;So for our above example, if &lt;code&gt;JoinComponent-button&lt;/code&gt; was intended for use in the component to look like a standard button, the code would be:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.JoinComponent-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* any new styles if applicable */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This may seem like overkill if your component uses many common app styles, but it ensures that component selectors remain totally isolated and will never clash with one another. It does technically mean that everything you need to style the component does not lie solely in the file, but it would still look the same if it were used anywhere in the site. Additionally, it prevents code duplication.&lt;/p&gt;

&lt;h3 id=&quot;do-not-nest-classes&quot;&gt;4. Do not nest classes&lt;/h3&gt;

&lt;p&gt;This rule only applies to component-specific &lt;code&gt;.scss&lt;/code&gt; files. The reasoning behind this is that your layers of specificity remain low, as you avoid cases where classes only get certain styling when they are inside other classes etc. Therefore if you ever changed the heirarchy of the component markup, it would break the styling.&lt;/p&gt;

&lt;p&gt;You are allowed to style anything inside a class that is a regular HTML component (paragraph or anchor tags for example), but instead of nesting classes, simple create them as two separate selectors. The fact that each component selector starts with the component’s name also means that you can be vague in your selector names and not worry that the style will affect other areas of the app:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* Instead of this: */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.well&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;.well-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Do this: */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Component-well&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.Component-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
        <link>http://tech.octopus.energy/2016/03/23/organising-styles-for-a-react-django-hybrid.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/2016/03/23/organising-styles-for-a-react-django-hybrid.html</guid>
        
        
      </item>
    
      <item>
        <title>Testing for missing migrations in Django</title>
        <description>&lt;p&gt;Since version 1.7, Django creates migrations for a more than just changes to
your model fields. It’s easy to forget to create a migration after changing,
say, the &lt;code&gt;verbose_name_plural&lt;/code&gt; of a model class - I’ve done this many times.
This can lead to a mess down the line when multiple developers all end up
creating the same migration in separate branches.&lt;/p&gt;

&lt;p&gt;You can avoid this situation by checking for missing migrations in your test
suite:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.management&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_command&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_for_missing_migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;call_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;#39;makemigrations&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dry_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;SystemExit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# The exit code will be 1 when there are no missing migrations&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;There are missing migrations:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we call the &lt;code&gt;makemigrations&lt;/code&gt; command in “dry-run” mode and test the 
exit code to determine if there are any missing migrations. If there are missing
migrations, the test will fail and print the captured output from the
&lt;code&gt;makemigrations&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Note that if you are using a custom &lt;code&gt;MIGRATION_MODULES&lt;/code&gt; setting to &lt;a href=&quot;https://docs.djangoproject.com/en/1.9/ref/settings/#migration-modules&quot;&gt;avoid
applying migrations during
tests&lt;/a&gt;, you need to restore its default value for
the above command to work:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;StringIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.management&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_command&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.test&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override_settings&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@override_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIGRATION_MODULES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_for_missing_migrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;call_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&amp;#39;makemigrations&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dry_run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;SystemExit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# The exit code will be 1 when there are no missing migrations&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unicode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;There are missing migrations:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Credit for this implementation belongs to Mozilla’s Ed Morley, who &lt;a href=&quot;https://github.com/mozilla/treeherder/commit/dd539147716125bb4d2798cdaf613e294c363fb2&quot;&gt;committed a
similar fix&lt;/a&gt; 
for their &lt;a href=&quot;https://github.com/mozilla/treeherder/&quot;&gt;treeherder&lt;/a&gt; project. The above snippets are 
slightly extended versions of his original.&lt;/p&gt;

&lt;p&gt;Related reading:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here’s &lt;a href=&quot;http://tech.yunojuno.com/keeping-on-top-of-django-migrations&quot;&gt;another approach&lt;/a&gt; by YunoJuno that achieves the same effect.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://tech.octopus.energy/2016/01/21/testing-for-missing-migrations-in-django.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/2016/01/21/testing-for-missing-migrations-in-django.html</guid>
        
        
      </item>
    
      <item>
        <title>Hello world, would you like to join us?</title>
        <description>&lt;p&gt;We’re looking for super-smart people to join the tech team at Octopus Energy. We’re in the process of designing and building our initial infrastructure. There are many difficult design problems to solve; we need creative, analytical minds who can help tame this notoriously tricky domain.  &lt;/p&gt;

&lt;p&gt;To start with, our main technologies will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AWS - using the excellent Hashicorp toolset (Vagrant, Packer, Consul and Terraform).&lt;/li&gt;
  &lt;li&gt;Python - especially Django and Django-REST-Framework. We’re also looking to employ Python’s data processing libraries such as numpy and pandas (although this is still up for debate);&lt;/li&gt;
  &lt;li&gt;Postgres and DynamoDB&lt;/li&gt;
  &lt;li&gt;Memcached and Redis;&lt;/li&gt;
  &lt;li&gt;React and related modules from the Javascript ecosystem - our consumer-facing user interfaces are going to be super slick;&lt;/li&gt;
  &lt;li&gt;Node, npm, webpack, babel, gulp etc&lt;/li&gt;
  &lt;li&gt;Puppet - for config management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our current priorities lie with server-side work so we’re keen to
speak to Pythonistas, developer data scientists or anyone with a love of automation and data processing.&lt;/p&gt;

&lt;p&gt;But we’re always interested in talking to smart, motivated people with an
interest in green tech - we’d love to hear from anyone with experience in the
above. &lt;/p&gt;

&lt;p&gt;Could this be you?&lt;/p&gt;

&lt;p&gt;We hope so. Ideally, you’ll have experience in one or more of the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Strong Python, especially Django and building for the web;&lt;/li&gt;
  &lt;li&gt;Knowledge of data processing (eg luigi, pandas, numpy - doesn’t have
to be Python though)&lt;/li&gt;
  &lt;li&gt;Building slick user interfaces with React; &lt;/li&gt;
  &lt;li&gt;Knowledge of the modern Javascript ecosystem and asset build pipelines (eg
webpack, mocha, gulp);&lt;/li&gt;
  &lt;li&gt;Non-trivial experience with AWS;&lt;/li&gt;
  &lt;li&gt;Experience working with 3rd party APIs, eg XML webservices, REST APIs, FTP
filedrops, that kind of thing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a great opportunity to be an early employee at a revolutionary company. Working at Octopus Energy offers the unique combination of solving difficult technical problems with modern technology as well as working on something that genuinely will make the world a better place (that is, helping transition the UK to a lower carbon future).&lt;/p&gt;

&lt;p&gt;Lots of experience isn’t strictly necessary to join. We’re interested in both graduates as well as developers with experience in the above technologies or the UK energy market. &lt;/p&gt;

&lt;p&gt;If this sounds interesting, tell us about yourself via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#116;&amp;#097;&amp;#108;&amp;#101;&amp;#110;&amp;#116;&amp;#064;&amp;#111;&amp;#099;&amp;#116;&amp;#111;&amp;#101;&amp;#110;&amp;#101;&amp;#114;&amp;#103;&amp;#121;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;&amp;#116;&amp;#097;&amp;#108;&amp;#101;&amp;#110;&amp;#116;&amp;#064;&amp;#111;&amp;#099;&amp;#116;&amp;#111;&amp;#101;&amp;#110;&amp;#101;&amp;#114;&amp;#103;&amp;#121;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PS - Right now, we’re not considering 100% remote candidates. At this early
stage, there’s enormous value in high-bandwidth person-to-person communication
that you can only get by working in the same space. This may change later on of
course.&lt;/p&gt;

</description>
        <pubDate>Mon, 23 Nov 2015 00:00:00 +0000</pubDate>
        <link>http://tech.octopus.energy/2015/11/23/tech-jobs.html</link>
        <guid isPermaLink="true">http://tech.octopus.energy/2015/11/23/tech-jobs.html</guid>
        
        
      </item>
    
  </channel>
</rss>
